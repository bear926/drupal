<?php

/**
 * @file
 * Dont work.
 */
 
function mym_boot() {
	if(arg(0) == 'mym' and arg(1) == '2'){
		watchdog('mym args', arg(1), $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL);	
	}
	
}

function mym_init() {
	 drupal_add_css(drupal_get_path('module', 'foo') . '/foo.css');	
}
 
 
/**
 * Implementation of hook_menu().
 */
function mym_menu() {
	$items['mym'] = array(  
		'title'           => 'My title bathc', 
		'description'     => 'My title bathc', 
		'page callback'   => 'drupal_get_form',
		'page arguments'  => array('mym_batch_form'),
		'access arguments' => array('administer site configuration'),
	); 
	return $items;
}

	
/**
 * View content in page mym.
 */
function _page_example($arg = NULL) {
		return $content = drupal_get_form('mym_batch_myform'); 
}

 
//$form['#attached']['js'][]  = $path . 'mymodule.js';
//$form['#attached']['css'][] = $path . 'mymodule.css';
	
/**
 * Views form in my page.
 */
function mym_myform($form, &$form_state) {
  $form = array();
  $form['number1'] = array(
    '#type'  => 'textfield',
    '#title' => t('Name'),
    '#size'  => 20,
  );
  $form['number2'] = array(
    '#type'  => 'textfield',
    '#title' => t('Last Name'),
    '#size'  => 20,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('OK'),
  );
  return $form;
}


/**
 * Implementation of hook_block_info().
 */
function mym_block_info() {
	$blocks['mym'] = array(
    'info' => t('My block'),
		'cache' => DRUPAL_NO_CACHE
	);
	return $blocks;	
}


/**
 * Implementation of hook_block_view().
 */
function mym_block_view($delta = '') {
	$block = array();
	switch ($delta) {
		case 'mym':
			$block['subject'] = 'My block';
			if (user_access('administer mym')) {
				$block['content'] = t('I views this block !!!!!1111 '.mym_ggg()); 
			}
			else {
				$block['content'] = t('access to view this content is denied');
			}
			break;
	}
	return $block;
}


/**
 * Implementation of hook_block_view().
 */
function mym_permission() {
  return array(
    'administer mym' => array(
      'title' => t('Administer My module mym'),
      'description' => t('Access to view this content is denied.')
    ),
  );
}


/**
* Create function with my hook.
*/
function mym_ggg() {
  $data = array();
  $data = module_invoke_all('mym_data');
  foreach($data as $v){
    return $v.' its my hook';
  }
}


/**
* Create function for bath form.
*/
function mym_batch_form($form, &$form_state) {
  $form = array();
  $form['create'] = array(
    '#type'  => 'textfield',
    '#title' => t('How match nod create:'),
    '#size'  => 20,
  );
  $form['delete'] = array(
    '#type'  => 'textfield',
    '#title' => t('You delete 5 nods is type:'),
    '#size'  => 20,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('OK'),
  );
  return $form;
}


/**
 * Validate for mym_batch_form
 */
 /*
function mym_batch_form_validate($form, &$form_state) {
  if (!is_int($form_state['values']['create'])) {
    form_set_error('create', t('Field "@fieldname" must be number.',
      array('@fieldname' => t('How match nod create'))));
  }
 
}
 */
function mym_batch_form_submit($form, &$form_state) {
  $r = NULL;
  if ( $form_state['values']['create'] != ''){
    $r = $form_state['values']['create'];
    $result = range(1, $r);
    foreach ($result as $row) {
      $operations[] = array('mym_add_nod', array());
    }
  }
  if ($form_state['values']['delete'] != ''){
    $type = $form_state['values']['delete'];
    $result = range(1, 5);
    foreach ($result as $row) {
      $operations[] = array('mym_del_nod', array($type));
    }
  }
  if (isset($operations)){
    $batch = array(
      'operations' => $operations,
      'finished' => $r ? 'mym_batch_finished' : 'mym_batch_del_finished',
    );
    batch_set($batch);
  }
}
 
 
function mym_add_nod(&$context) {
  global $user;
  $node = new stdClass();
  $node->title = 'YOUR TITLE' . md5(mt_rand(0, 200));
  $node->type = 'film';
  node_object_prepare($node); 
  $node->language = en; 
  $node->uid = $user->uid;
  $node->status = 1; 
  $node->promote = 0; 
  $node->comment = 1; 
  $node = node_submit($node);
  node_save($node);
 
  
  $context['results'][] = $node->nid; 
  $context['sandbox']['progress']++;
  $context['sandbox']['current_node'] = $node->nid;
}
 

function mym_del_nod($type, &$context){
  $result = db_delete('node')
    ->condition('type', $type)
    ->execute();
  if ($result ) {
    $context['results'][] = $type;
  }
  else {
    $context['results'][] = 'Undefined type';
  }
}


function mym_batch_finished($success, $results, $operations) {

  if ($success) {
    drupal_set_message('Create ' . count($results) . ' nods');
  }
  else {
    drupal_set_message('Finished is a .', 'error');
  }
  $form_state['redirect'] = 'mym';
}


function mym_batch_del_finished($success, $results, $operations) {

  if ($success) {
    if ( $results[0] == 'Undefined type') {
      drupal_set_message('Error '. $results[0]);
    }
    else {
      drupal_set_message('Delete 5  nods type '. $results[0]);
    }
  }
  else {
    drupal_set_message('Error', 'error' );
  }
  $form_state['redirect'] = 'mym';
}




